# -*- coding: utf-8 -*-
"""devglan2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s3mhCWQt8cP0NgYWtA5j6LuM1hvxVNCU
"""

!pip install pycrypto

import base64
import hashlib
from Crypto import Random
from Crypto.Cipher import AES
import random
import string

random.seed(0)

#Key SHA1
input_key = "mnbvcxzlkjhgfdsa"  
result = hashlib.sha1(input_key.encode())  
init_vector = result.hexdigest()
iv = init_vector[12:][:-12]
IV = bytes(iv, "utf-8")

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
unpad = lambda s: s[:-ord(s[len(s)-1:])]

class AESCipher:

    def __init__( self, key ):
        self.key = key
    def encrypt( self, raw ):
        raw = pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, IV)
        return cipher.encrypt(raw)

key = '1234567890123456'
message = input("Enter The Words: ")
enc = AESCipher(key).encrypt(message)
#print(enc)

converting = base64.b64encode(enc)
fix = converting.decode("utf-8")
print(fix)

def rand(min, max):
  return int((max - min) * random.random() + min)

def generate_table():
  alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/!"#$%&\()*+,-.?@:|<>[{}_^=]~`'
  table = [[0] * 10 for row in range(10)]
  alphabet_2 = '!"#$%&\()*+,-.?@:|<>[{}_^=]~`'

  for y in range(10):
    for x in range(10):
      if len(alphabet) != 0:
        table[x][y] = alphabet[rand(0, len(alphabet))]
        alphabet = alphabet.replace(table[x][y], '')
      else :
        alphabet = alphabet_2
        table[x][y] = alphabet[rand(0, len(alphabet))]
  return table

def getStr(x, format='%02s'):
  return ''.join(format % i for i in x)

def print_table(table):
  print(' ' + getStr(range(0, 10)))
  for row in range(0, len(table)):
    print(str(row) + getStr(table[row]))

def encrypt(table, words):
  string = table
  cipher = ''
  for ch in words:
    for row in range(len(table)):
      if ch in table[row]:
        x = str((table[row].index(ch)))
        y = str(row)
        cipher += y + x
        break
  return cipher

if __name__ == '__main__':
  table = generate_table()
  ciphertext = encrypt(table, str(fix))
  tes = ciphertext

#print(final_string)
#print_table(table)
print(tes)

import hashlib
from base64 import b64decode
from base64 import b64encode
from Crypto.Cipher import AES
import base64
import string
import random

random.seed(0)

def rand(min, max):
  return int((max - min) * random.random() + min)

def generate_table():
  alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/!"#$%&\()*+,-.?@:|<>[{}_^=]~`'
  table = [[0] * 10 for row in range(10)]
  alphabet_2 = '!"#$%&\()*+,-.?@:|<>[{}_^=]~`'

  for y in range(10):
    for x in range(10):
       if len(alphabet) != 0:
          table[x][y] = alphabet[rand(0, len(alphabet))]
          alphabet = alphabet.replace(table[x][y], '')
       else:
          alphabet = alphabet_2
          table[x][y] = alphabet[rand(0, len(alphabet))]
  return table

def getStr(x, format='%02s'):
  return ''.join(format % i for i in x)

def print_table(table):
  print(' ' + getStr(range(0, 10)))
  for row in range(0, len(table)):
    print(str(row) + getStr(table[row]))

def decrypt(table, numbers):
  text = ''
  for index in range(0, len(numbers), 2):
    y = int(numbers[index]) 
    x = int(numbers[index + 1]) 
    text += table[y][x]
  return text

if __name__ == '__main__':
  table = generate_table()
  tes = ciphertext

plaintext = decrypt(table, tes)

#Key SHA1
input_key = "mnbvcxzlkjhgfdsa"  
result = hashlib.sha1(input_key.encode())  
init_vector = result.hexdigest()
iv = init_vector[12:][:-12]
IV = bytes(iv, "utf-8")

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
unpad = lambda s: s[:-ord(s[len(s)-1:])]

class AESCipher(object):

    def __init__(self, key):
        self.key = key 

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, IV)
        dec = cipher.decrypt(enc)
        return unpad(dec).decode('utf-8')

key = '1234567890123456'
dec = AESCipher(key).decrypt(plaintext)
#print(plaintext)
print(dec)